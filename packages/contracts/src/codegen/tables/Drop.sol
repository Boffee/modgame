// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Drop")));
bytes32 constant DropTableId = _tableId;

struct DropData {
  bytes32 primaryResource;
  bytes32 secondaryResource;
  uint128 primaryResourceQuantity;
  uint128 secondaryResourceQuantity;
}

library Drop {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.UINT128;
    _schema[3] = SchemaType.UINT128;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "primaryResource";
    _fieldNames[1] = "secondaryResource";
    _fieldNames[2] = "primaryResourceQuantity";
    _fieldNames[3] = "secondaryResourceQuantity";
    return ("Drop", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get primaryResource */
  function getPrimaryResource(bytes32 creature) internal view returns (bytes32 primaryResource) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get primaryResource (using the specified store) */
  function getPrimaryResource(IStore _store, bytes32 creature) internal view returns (bytes32 primaryResource) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set primaryResource */
  function setPrimaryResource(bytes32 creature, bytes32 primaryResource) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((primaryResource)));
  }

  /** Set primaryResource (using the specified store) */
  function setPrimaryResource(IStore _store, bytes32 creature, bytes32 primaryResource) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((primaryResource)));
  }

  /** Get secondaryResource */
  function getSecondaryResource(bytes32 creature) internal view returns (bytes32 secondaryResource) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get secondaryResource (using the specified store) */
  function getSecondaryResource(IStore _store, bytes32 creature) internal view returns (bytes32 secondaryResource) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set secondaryResource */
  function setSecondaryResource(bytes32 creature, bytes32 secondaryResource) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((secondaryResource)));
  }

  /** Set secondaryResource (using the specified store) */
  function setSecondaryResource(IStore _store, bytes32 creature, bytes32 secondaryResource) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((secondaryResource)));
  }

  /** Get primaryResourceQuantity */
  function getPrimaryResourceQuantity(bytes32 creature) internal view returns (uint128 primaryResourceQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint128(Bytes.slice16(_blob, 0)));
  }

  /** Get primaryResourceQuantity (using the specified store) */
  function getPrimaryResourceQuantity(
    IStore _store,
    bytes32 creature
  ) internal view returns (uint128 primaryResourceQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint128(Bytes.slice16(_blob, 0)));
  }

  /** Set primaryResourceQuantity */
  function setPrimaryResourceQuantity(bytes32 creature, uint128 primaryResourceQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((primaryResourceQuantity)));
  }

  /** Set primaryResourceQuantity (using the specified store) */
  function setPrimaryResourceQuantity(IStore _store, bytes32 creature, uint128 primaryResourceQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((primaryResourceQuantity)));
  }

  /** Get secondaryResourceQuantity */
  function getSecondaryResourceQuantity(bytes32 creature) internal view returns (uint128 secondaryResourceQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint128(Bytes.slice16(_blob, 0)));
  }

  /** Get secondaryResourceQuantity (using the specified store) */
  function getSecondaryResourceQuantity(
    IStore _store,
    bytes32 creature
  ) internal view returns (uint128 secondaryResourceQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint128(Bytes.slice16(_blob, 0)));
  }

  /** Set secondaryResourceQuantity */
  function setSecondaryResourceQuantity(bytes32 creature, uint128 secondaryResourceQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((secondaryResourceQuantity)));
  }

  /** Set secondaryResourceQuantity (using the specified store) */
  function setSecondaryResourceQuantity(IStore _store, bytes32 creature, uint128 secondaryResourceQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((secondaryResourceQuantity)));
  }

  /** Get the full data */
  function get(bytes32 creature) internal view returns (DropData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 creature) internal view returns (DropData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 creature,
    bytes32 primaryResource,
    bytes32 secondaryResource,
    uint128 primaryResourceQuantity,
    uint128 secondaryResourceQuantity
  ) internal {
    bytes memory _data = encode(primaryResource, secondaryResource, primaryResourceQuantity, secondaryResourceQuantity);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 creature,
    bytes32 primaryResource,
    bytes32 secondaryResource,
    uint128 primaryResourceQuantity,
    uint128 secondaryResourceQuantity
  ) internal {
    bytes memory _data = encode(primaryResource, secondaryResource, primaryResourceQuantity, secondaryResourceQuantity);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 creature, DropData memory _table) internal {
    set(
      creature,
      _table.primaryResource,
      _table.secondaryResource,
      _table.primaryResourceQuantity,
      _table.secondaryResourceQuantity
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 creature, DropData memory _table) internal {
    set(
      _store,
      creature,
      _table.primaryResource,
      _table.secondaryResource,
      _table.primaryResourceQuantity,
      _table.secondaryResourceQuantity
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (DropData memory _table) {
    _table.primaryResource = (Bytes.slice32(_blob, 0));

    _table.secondaryResource = (Bytes.slice32(_blob, 32));

    _table.primaryResourceQuantity = (uint128(Bytes.slice16(_blob, 64)));

    _table.secondaryResourceQuantity = (uint128(Bytes.slice16(_blob, 80)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 primaryResource,
    bytes32 secondaryResource,
    uint128 primaryResourceQuantity,
    uint128 secondaryResourceQuantity
  ) internal view returns (bytes memory) {
    return abi.encodePacked(primaryResource, secondaryResource, primaryResourceQuantity, secondaryResourceQuantity);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 creature) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 creature) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 creature) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((creature));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
