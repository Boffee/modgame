// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CreatureStats")));
bytes32 constant CreatureStatsTableId = _tableId;

struct CreatureStatsData {
  uint40 lifespan;
  uint8 moveDistance;
  uint40 moveCooldown;
  uint8 attackDistance;
  uint40 attackCooldown;
  uint40 cooldownReserveCapacity;
}

library CreatureStats {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.UINT40;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.UINT40;
    _schema[3] = SchemaType.UINT8;
    _schema[4] = SchemaType.UINT40;
    _schema[5] = SchemaType.UINT40;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "lifespan";
    _fieldNames[1] = "moveDistance";
    _fieldNames[2] = "moveCooldown";
    _fieldNames[3] = "attackDistance";
    _fieldNames[4] = "attackCooldown";
    _fieldNames[5] = "cooldownReserveCapacity";
    return ("CreatureStats", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get lifespan */
  function getLifespan(bytes32 key) internal view returns (uint40 lifespan) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Get lifespan (using the specified store) */
  function getLifespan(IStore _store, bytes32 key) internal view returns (uint40 lifespan) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Set lifespan */
  function setLifespan(bytes32 key, uint40 lifespan) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((lifespan)));
  }

  /** Set lifespan (using the specified store) */
  function setLifespan(IStore _store, bytes32 key, uint40 lifespan) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((lifespan)));
  }

  /** Get moveDistance */
  function getMoveDistance(bytes32 key) internal view returns (uint8 moveDistance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get moveDistance (using the specified store) */
  function getMoveDistance(IStore _store, bytes32 key) internal view returns (uint8 moveDistance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set moveDistance */
  function setMoveDistance(bytes32 key, uint8 moveDistance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((moveDistance)));
  }

  /** Set moveDistance (using the specified store) */
  function setMoveDistance(IStore _store, bytes32 key, uint8 moveDistance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((moveDistance)));
  }

  /** Get moveCooldown */
  function getMoveCooldown(bytes32 key) internal view returns (uint40 moveCooldown) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Get moveCooldown (using the specified store) */
  function getMoveCooldown(IStore _store, bytes32 key) internal view returns (uint40 moveCooldown) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Set moveCooldown */
  function setMoveCooldown(bytes32 key, uint40 moveCooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((moveCooldown)));
  }

  /** Set moveCooldown (using the specified store) */
  function setMoveCooldown(IStore _store, bytes32 key, uint40 moveCooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((moveCooldown)));
  }

  /** Get attackDistance */
  function getAttackDistance(bytes32 key) internal view returns (uint8 attackDistance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get attackDistance (using the specified store) */
  function getAttackDistance(IStore _store, bytes32 key) internal view returns (uint8 attackDistance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set attackDistance */
  function setAttackDistance(bytes32 key, uint8 attackDistance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((attackDistance)));
  }

  /** Set attackDistance (using the specified store) */
  function setAttackDistance(IStore _store, bytes32 key, uint8 attackDistance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((attackDistance)));
  }

  /** Get attackCooldown */
  function getAttackCooldown(bytes32 key) internal view returns (uint40 attackCooldown) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Get attackCooldown (using the specified store) */
  function getAttackCooldown(IStore _store, bytes32 key) internal view returns (uint40 attackCooldown) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Set attackCooldown */
  function setAttackCooldown(bytes32 key, uint40 attackCooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((attackCooldown)));
  }

  /** Set attackCooldown (using the specified store) */
  function setAttackCooldown(IStore _store, bytes32 key, uint40 attackCooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((attackCooldown)));
  }

  /** Get cooldownReserveCapacity */
  function getCooldownReserveCapacity(bytes32 key) internal view returns (uint40 cooldownReserveCapacity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Get cooldownReserveCapacity (using the specified store) */
  function getCooldownReserveCapacity(
    IStore _store,
    bytes32 key
  ) internal view returns (uint40 cooldownReserveCapacity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint40(Bytes.slice5(_blob, 0)));
  }

  /** Set cooldownReserveCapacity */
  function setCooldownReserveCapacity(bytes32 key, uint40 cooldownReserveCapacity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((cooldownReserveCapacity)));
  }

  /** Set cooldownReserveCapacity (using the specified store) */
  function setCooldownReserveCapacity(IStore _store, bytes32 key, uint40 cooldownReserveCapacity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((cooldownReserveCapacity)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (CreatureStatsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (CreatureStatsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    uint40 lifespan,
    uint8 moveDistance,
    uint40 moveCooldown,
    uint8 attackDistance,
    uint40 attackCooldown,
    uint40 cooldownReserveCapacity
  ) internal {
    bytes memory _data = encode(
      lifespan,
      moveDistance,
      moveCooldown,
      attackDistance,
      attackCooldown,
      cooldownReserveCapacity
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    uint40 lifespan,
    uint8 moveDistance,
    uint40 moveCooldown,
    uint8 attackDistance,
    uint40 attackCooldown,
    uint40 cooldownReserveCapacity
  ) internal {
    bytes memory _data = encode(
      lifespan,
      moveDistance,
      moveCooldown,
      attackDistance,
      attackCooldown,
      cooldownReserveCapacity
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, CreatureStatsData memory _table) internal {
    set(
      key,
      _table.lifespan,
      _table.moveDistance,
      _table.moveCooldown,
      _table.attackDistance,
      _table.attackCooldown,
      _table.cooldownReserveCapacity
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, CreatureStatsData memory _table) internal {
    set(
      _store,
      key,
      _table.lifespan,
      _table.moveDistance,
      _table.moveCooldown,
      _table.attackDistance,
      _table.attackCooldown,
      _table.cooldownReserveCapacity
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CreatureStatsData memory _table) {
    _table.lifespan = (uint40(Bytes.slice5(_blob, 0)));

    _table.moveDistance = (uint8(Bytes.slice1(_blob, 5)));

    _table.moveCooldown = (uint40(Bytes.slice5(_blob, 6)));

    _table.attackDistance = (uint8(Bytes.slice1(_blob, 11)));

    _table.attackCooldown = (uint40(Bytes.slice5(_blob, 12)));

    _table.cooldownReserveCapacity = (uint40(Bytes.slice5(_blob, 17)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint40 lifespan,
    uint8 moveDistance,
    uint40 moveCooldown,
    uint8 attackDistance,
    uint40 attackCooldown,
    uint40 cooldownReserveCapacity
  ) internal view returns (bytes memory) {
    return
      abi.encodePacked(lifespan, moveDistance, moveCooldown, attackDistance, attackCooldown, cooldownReserveCapacity);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
